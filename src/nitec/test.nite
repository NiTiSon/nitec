using System;

module global;

public type List<T>
{
	Array<T> elements;

	public :new(usize beginSize)
	{
		elements = Array<T>::new();
	}
}

// Heap allocated array (fixed-size)
public ref type Array<T>
{
	private T* first;
	private usize count;

	public extern :new(usize size);
	public extern operator :get[usize index];
	public extern operator :set[usize index];
	public extern :delete(usize size); // ref type delete operator invokes ONLY when all references are dead
}

// type - unmanaged type
// ref type - managed type (always a reference to type instance inside heap)